#print the info of the file
snippet n
	/*
	 * ====================================================================================
	 * 
	 * 	     FILENAME:  ${1:`Filename()`.c}
	 *	  DESCRIPTION:  ${2:notes} 
	 *	      VERSION:  ${3:1.0}
	 *    CREATE DATE:  `system("date")`
	 *    MODIFY DATE:        
	 *	     Compiler:  gcc
	 *         Author:  Leizongxiong 
	 *          Email:  leizongxiong@163.com 
	 *   Organization:  BUPT
	 *
	 * ====================================================================================  
	 */${4}
#print the inof of the fun
snippet nf
	/**************************************************************************************

			  NAME:  ${1:funcname} 
	   DESCRIPTION:  ${2:what It do}
	         INPUT:  ${3:none}
	        OUPPUT:  ${4:none}
	        RETURN:  ${5:none} 
			 OTHER:  ${6:none}
	 
	 *************************************************************************************/
	${7}
#print date
snippet date
	`system("date")`
#@param
snippet @
	@param ${1:varible} ${2:note}
#return 
snippet @re
	@return ${1:varible} ${2:note}
snippet re
	return ${1:0};
# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	} ${2}	
#/**/
snippet	//
	/*
	 *${1:NOTE}
	 */
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet ind
	#include "${1:`Filename("$1.h")`}"${2}
snippet ifn
	#ifndef $1
	#define ${1:`toupper("__".Filename()."_H__")`}

	${2}

	#endif /* end of include guard: $1 */
snippet def
	#define 
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
	
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
	#define $1
	${2}
	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}${3}
#else if
snippet elif
	else if(${1})
		{
			${2:conding of else}
		}${3}
#else	
snippet el
	else {
		${1:coding of else}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
#switch
snippet sw
	switch(${1}){
			${2}
	}
#case 
snippet cs
	case ${1}:
		${2:break;}
#default
snippet de
	default:
		break;
	
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet dfun 
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet str
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* member */}
	} ${2:e_name};${3}
#enum 
snippet em
	emum ${1:e_name}{${2}};${3}
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
#printf
snippet pr
	printf("${1:%s}\n"${2});${3}
#scanf
snippet sc
	scanf("${1}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
#C reserved identifier 
snippet un
	unsigned ${1}
snippet br 
	break;${1}	
snippet co 
	continuea;${1}
snippet con
	const ${1:const_varible}
snippet ex
	extern ${1:extern_varible}
snippet st
	static ${1:static_varible}
snippet .
	->${1}
#function in standard library
snippet fclose
	fclose(${1:FILE*});${2}
snippet fgets
	fgets(${1:FILE*});
snippet fgetc
	fgetc(${1:FILE*});
snippet isalnum
	isalnum(${1:char *});${2}
snippet isalpha
	isalnum(${1:char *});${2}
snippet	isascii
	isascii(${1:char *});${2}
	
	
	
	
